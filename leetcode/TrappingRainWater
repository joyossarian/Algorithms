class Solution {
public:
    int trap(int A[], int n) {
        // Start typing your C/C++ solution below
      // DO NOT write int main() function
    	if (n <= 2)
    	{
    		return 0;
    	}
    	std::vector<int> peaks;
    	for (int i = 0; i < n; ++i)
    	{
    		if (i == 0 && n > 1 && A[0] >= A[1])
    		{
    			peaks.push_back(0);
    		}
    		else if (i + 1 < n && (A[i] >= A[i - 1]) && A[i] >= A[i + 1])
    		{
    			peaks.push_back(i);
    		}
    		else if (i + 1 >=n && (A[i] >= A[i - 1]))
    		{
    			peaks.push_back(i);
    		}
    	}
    
    	std::vector<int> realPeaks;
    	if (!peaks.empty())
    		realPeaks.push_back(peaks[0]);
    	for (size_t i = 1; i < peaks.size() - 1; ++i)
    	{
    		bool front = false;
    		bool back = false;
    		int peakVal = A[peaks[i]];
    		for (size_t j = 0; j < i; ++j)
    		{
    			if (A[peaks[j]] > peakVal)
    			{
    				front = true;
    				break;
    			}
    		}
    		for (size_t j = i + 1; j < peaks.size(); ++j)
    		{
    			if (A[peaks[j]] > peakVal)
    			{
    				back = true;
    				break;
    			}
    		}
    		if (!back || !front)
    		{
    			realPeaks.push_back(peaks[i]);
    		}
    	}
    	if (peaks.size() > 1)
    		realPeaks.push_back(peaks[peaks.size() - 1]);
    
    	int result = 0;
    	for (int i = 0; i < (int)realPeaks.size() - 1; ++i)
    	{
    		int psi = realPeaks[i];
    		int pse = realPeaks[i + 1];
    		int psHeight = A[psi];
    		int peHeight = A[pse];
    		int finalHeight = std::min(psHeight, peHeight);
    		for (int j = psi; j < pse; ++j)
    		{
    			int cHeight = A[j];
    			if (cHeight < finalHeight)
    			{
    				result += (finalHeight - cHeight);
    			}
    		}
    	}
    	return result;
    }


};
